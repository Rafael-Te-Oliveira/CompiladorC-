	1: Reserved Word: int
	1: ID: programasAtivos
	1: ;
	2: Reserved Word: int
	2: ID: programaUm
	2: ;
	3: Reserved Word: int
	3: ID: programaDois
	3: ;
	4: Reserved Word: int
	4: ID: programaTres
	4: ;
	5: Reserved Word: int
	5: ID: programaQuatro
	5: ;
	6: Reserved Word: int
	6: ID: programaCinco
	6: ;
	8: Reserved Word: void
	8: ID: main
	8: (
	8: Reserved Word: void
	8: )
	8: {
	9: Reserved Word: int
	9: ID: preempcao
	9: ;
	10: Reserved Word: int
	10: ID: quantum
	10: ;
	11: Reserved Word: int
	11: ID: i
	11: ;
	12: Reserved Word: int
	12: ID: programa
	12: ;
	14: Reserved Word: while
	14: (
	14: Number: 1
	14: >
	14: Number: 0
	14: )
	14: {
	15: ID: preempcao
	15: Symbol: =
	15: ID: input
	15: (
	15: )
	15: ;
	17: Reserved Word: if
	17: (
	17: ID: preempcao
	17: ==
	17: Number: 1
	17: )
	17: {
	18: ID: quantum
	18: Symbol: =
	18: ID: input
	18: (
	18: )
	18: ;
	19: }
	19: Reserved Word: else
	19: {
	20: ID: quantum
	20: Symbol: =
	20: Number: 999
	20: ;
	21: }
	23: ID: output
	23: (
	23: ID: quantum
	23: )
	23: ;
	25: ID: programasAtivos
	25: Symbol: =
	25: ID: input
	25: (
	25: )
	25: ;
	27: ID: i
	27: Symbol: =
	27: Number: 0
	27: ;
	28: Reserved Word: while
	28: (
	28: ID: i
	28: <
	28: ID: programasAtivos
	28: )
	28: {
	29: ID: i
	29: Symbol: =
	29: ID: i
	29: +
	29: Number: 1
	29: ;
	30: ID: programa
	30: Symbol: =
	30: ID: input
	30: (
	30: )
	30: ;
	31: Reserved Word: if
	31: (
	31: ID: programa
	31: ==
	31: Number: 1
	31: )
	31: {
	32: ID: programaUm
	32: Symbol: =
	32: Number: 1
	32: ;
	33: }
	34: Reserved Word: if
	34: (
	34: ID: programa
	34: ==
	34: Number: 2
	34: )
	34: {
	35: ID: programaDois
	35: Symbol: =
	35: Number: 1
	35: ;
	36: }
	37: Reserved Word: if
	37: (
	37: ID: programa
	37: ==
	37: Number: 3
	37: )
	37: {
	38: ID: programaTres
	38: Symbol: =
	38: Number: 1
	38: ;
	39: }
	40: Reserved Word: if
	40: (
	40: ID: programa
	40: ==
	40: Number: 4
	40: )
	40: {
	41: ID: programaQuatro
	41: Symbol: =
	41: Number: 1
	41: ;
	42: }
	43: Reserved Word: if
	43: (
	43: ID: programa
	43: ==
	43: Number: 5
	43: )
	43: {
	44: ID: programaCinco
	44: Symbol: =
	44: Number: 1
	44: ;
	45: }
	46: }
	48: ID: i
	48: Symbol: =
	48: Number: 0
	48: ;
	50: Reserved Word: while
	50: (
	50: ID: programasAtivos
	50: >
	50: Number: 0
	50: )
	50: {
	51: Reserved Word: if
	51: (
	51: ID: programaUm
	51: ==
	51: Number: 1
	51: )
	51: {
	52: ID: output
	52: (
	52: Number: 1
	52: )
	52: ;
	53: }
	54: Reserved Word: if
	54: (
	54: ID: programaDois
	54: ==
	54: Number: 1
	54: )
	54: {
	55: ID: output
	55: (
	55: Number: 2
	55: )
	55: ;
	56: }
	57: Reserved Word: if
	57: (
	57: ID: programaTres
	57: ==
	57: Number: 1
	57: )
	57: {
	58: ID: output
	58: (
	58: Number: 3
	58: )
	58: ;
	59: }
	60: Reserved Word: if
	60: (
	60: ID: programaQuatro
	60: ==
	60: Number: 1
	60: )
	60: {
	61: ID: output
	61: (
	61: Number: 4
	61: )
	61: ;
	62: }
	63: Reserved Word: if
	63: (
	63: ID: programaCinco
	63: ==
	63: Number: 1
	63: )
	63: {
	64: ID: output
	64: (
	64: Number: 5
	64: )
	64: ;
	65: }
	66: }
	68: ID: output
	68: (
	68: Number: 9999
	68: )
	68: ;
	69: }
	82: }
	83: EOF
Type integer
  Variable programasAtivos
Type integer
  Variable programaUm
Type integer
  Variable programaDois
Type integer
  Variable programaTres
Type integer
  Variable programaQuatro
Type integer
  Variable programaCinco
Type void
  Function main
    Type void
    Type integer
      Variable preempcao
    Type integer
      Variable quantum
    Type integer
      Variable i
    Type integer
      Variable programa
    While
      Operation: >
        Constant: 1
        Constant: 0
      Assign
        Id: preempcao
        Call to Function input 
      If
        Operation: ==
          Id: preempcao
          Constant: 1
        Assign
          Id: quantum
          Call to Function input 
        Assign
          Id: quantum
          Constant: 999
      Call to Function output 
        Id: quantum
      Assign
        Id: programasAtivos
        Call to Function input 
      Assign
        Id: i
        Constant: 0
      While
        Operation: <
          Id: i
          Id: programasAtivos
        Assign
          Id: i
          Operation: +
            Id: i
            Constant: 1
        Assign
          Id: programa
          Call to Function input 
        If
          Operation: ==
            Id: programa
            Constant: 1
          Assign
            Id: programaUm
            Constant: 1
        If
          Operation: ==
            Id: programa
            Constant: 2
          Assign
            Id: programaDois
            Constant: 1
        If
          Operation: ==
            Id: programa
            Constant: 3
          Assign
            Id: programaTres
            Constant: 1
        If
          Operation: ==
            Id: programa
            Constant: 4
          Assign
            Id: programaQuatro
            Constant: 1
        If
          Operation: ==
            Id: programa
            Constant: 5
          Assign
            Id: programaCinco
            Constant: 1
      Assign
        Id: i
        Constant: 0
      While
        Operation: >
          Id: programasAtivos
          Constant: 0
        If
          Operation: ==
            Id: programaUm
            Constant: 1
          Call to Function output 
            Constant: 1
        If
          Operation: ==
            Id: programaDois
            Constant: 1
          Call to Function output 
            Constant: 2
        If
          Operation: ==
            Id: programaTres
            Constant: 1
          Call to Function output 
            Constant: 3
        If
          Operation: ==
            Id: programaQuatro
            Constant: 1
          Call to Function output 
            Constant: 4
        If
          Operation: ==
            Id: programaCinco
            Constant: 1
          Call to Function output 
            Constant: 5
      Call to Function output 
        Constant: 9999
